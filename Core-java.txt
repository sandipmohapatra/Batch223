Features of java
-------------------------------------------
1)Java is object Oriented programming language.
2)Java is simpler than c and c++ as we don't have pointer concept,multiple Inheritance,operator overloading.
3)Java support multi-threading or multi-tasking.
4)we can develop web-application,network application,standalone application and also mobile application.
5)In java we have interface which support the concept of multiple inheritance.
6)In java we have constructor but no destructor.There is automatic garbage clearance.
7)Java is a secured language .we have 4 access specifier private,public,protected,default.
8)we have to save the by .java extention.
9)In java the class name and file should be same.
10)java is platform independent.It can execute in any o/s.When we compile the .java file it is converted to .class file.
.class file is in byte code.  
-----------------------------------------------------------------------------------------------------------------------
Data types
--------------------
1)byte - 1 byte
2)short -2 bytes
3)int -4bytes
4)long -8 bytes
5)float - 4 bytes
6)double -8 bytes
7)char - 2bytes
8)boolean - 1 bit
----------------------------------------
Derived datatype
---------------------
1)String
2)array
3)class
------------------------------------------------------
  Operator
---------------------
1)unary:-i++,++i,i--,--i;

2)binary
i)arithmatic operator:- +,-,*,/,%(modules/reminder)
ii)comparative operator:- <,>,<=,>=,==
iii)assignment :-=,!=
iv)bitwise :->>,<<
v)logical operator:-&&,||
3)ternary :- :,?
----------------------------------------------------------------------------
we have 4 access specifier private,public,protected,default
-----------------------------------------------------------------------------
1)private:- If we declare variable and methods as private we can access it within the class only.
2)public:-If we declare variable and methods as public we can access it within the class ,outside the class and outside the package.
3)protected:-If we declare variable and methods as protected we can access it within the class and also with in the child class.
4)default:- If we declare variable and methods as default we can access it within the class,out side the class but not outside the package.
------------------------------------------------------------------------------------------------------------------
Example-1
------------------------
package org.sandip;

public class First {

	public static void main(String[] args) {
		System.out.println("Welcome to java");
	}
}
--------------------------------------------------------------
example-2
-------------------
package org.sandip;

public class First {

	public static void main(String[] args) {
byte a=10;
short b=20;
int c=30;
long d=40;
float e=45.34f;
double f=67.44;
char g='a';
String h="apple";
System.out.println("the value of a is "+a);
System.out.println("the value of b is "+b);
System.out.println("the value of c is "+c);
System.out.println("the value of d is "+d);
System.out.println("the value of e is "+e);
System.out.println("the value of f is "+f);
System.out.println("the value of g is "+ g +"The value of h is "+h);
}
}
----------------------------------------------------------------------------------------------------------------------------------
example-3
---------------------
package org.sandip;

public class First {

	public static void main(String[] args) {
int a=10,b=20,c=a+b;
System.out.println("the sum  is "+c);
	}
}
----------------------------------------------------------------
example-4
-------------------
package org.sandip;
import java.util.*;
public class First {

	public static void main(String[] args) 
	{
Scanner ob=new Scanner(System.in);
System.out.println("Enter 2 nos");
int a=ob.nextInt();
int b=ob.nextInt();
int c=a+b;
System.out.println("the sum  is "+c);
	}
}
---------------------------------------------------------------------------
wap to enter 5 nos and find the sum and avg.
----------------------------------------------------------------------------
example-5
-------------------
package org.sandip;
import java.util.*;
public class First {

	public static void main(String[] args) 
	{
Scanner ob=new Scanner(System.in);
System.out.println("Enter 5 nos");
int a=ob.nextInt();
int b=ob.nextInt();
int c=ob.nextInt();
int d=ob.nextInt();
int e=ob.nextInt();
int sum=a+b+c+d+e;
int avg=sum/5;
System.out.println("the sum  is "+sum);
System.out.println("the avg  is "+avg);
	}
}
------------------------------------------------------------------------------
example-6
------------------
package org.sandip;
import java.util.*;
public class First {

	public static void main(String[] args) 
	{
Scanner ob=new Scanner(System.in);
System.out.println("Enter 2 nos");
int a=ob.nextInt();
int b=ob.nextInt();
if(a>b)
System.out.println("the greatest  is "+a);
else
System.out.println("the greatest  is "+b);
	}
}
--------------------------------------------------------
Example-7
-------------------
package org.sandip;
import java.util.*;
public class First {

	public static void main(String[] args) 
	{
Scanner ob=new Scanner(System.in);
System.out.println("Enter 3 nos");
int a=ob.nextInt();
int b=ob.nextInt();
int c=ob.nextInt();
if(a>b && a>c)
System.out.println("the greatest  is "+a);
else if(b>a && b>c)
System.out.println("the greatest  is "+b);
else
	System.out.println("the greatest  is "+c);
	
	}
}
-------------------------------------------------------------------------
Scanner ob=new Scanner(System.in);<---------taking input
System.out.println("Enter 2 nos");<----------to display


Scanner class we have methods to take input nextInt(),nextFloat(),nextByte()
we have to import java.util.*; package when we want to use scanner class.
------------------------------------
Example-8
------------------
package org.sandip;
import java.util.*;
public class First {

	public static void main(String[] args) 
	{
Scanner ob=new Scanner(System.in);
System.out.println("Enter 1 nos");
int a=ob.nextInt();
if(a%2==0)
System.out.println("the no is even");
else
	System.out.println("the no is  odd ");
	
	}
}
------------------------------------------------------------
wap to enter your age and find if your eligible to vote.
-------------------------------------------------------------------------
Example-9
-----------------------
package org.sandip;
import java.util.*;
public class First {

	public static void main(String[] args) 
	{
Scanner ob=new Scanner(System.in);
System.out.println("Enter your age");
int a=ob.nextInt();
if(a>=18)
System.out.println("your eligible to vote");
else
	System.out.println("your are not eligible to vote");
	
	}
}
------------------------------------------------------------------------
case and switch:-
In this we have to enter a value to the switch.The switch will jump to particular case ,execute it and then break.
----------------------------
example-10
----------------
package org.sandip;
import java.util.*;
public class First {

	public static void main(String[] args) 
	{
Scanner ob=new Scanner(System.in);
System.out.println("Enter a no");
int x=ob.nextInt();
switch(x)
{
case 1:System.out.println("one");
break;
case 2:System.out.println("two");
break;
case 3:System.out.println("three");
break;
case 4:System.out.println("four");
break;
case 5:System.out.println("five");
break;
default:System.out.println("wrong input");
}
}}
----------------------------------------------------------------
example-11
-----------------
package org.sandip;
import java.util.*;
public class First {

	public static void main(String[] args) 
	{
Scanner ob=new Scanner(System.in);
System.out.println("enter 2 nos");
int a=ob.nextInt();
int b=ob.nextInt();
System.out.println("Enter your choice 1.add,2.sub,3.mul,4.div");
int x=ob.nextInt();
switch(x)
{
case 1:System.out.println("The sum is "+(a+b));
break;
case 2:System.out.println("The subtraction is "+(a-b));
break;
case 3:System.out.println("The multiply is "+(a*b));
break;
case 4:System.out.println("The division is "+(a/b));
break;
default:System.out.println("wrong input");
}
}}
------------------------------------------------------------------------------
class and object:-
a class contains variables and methods.
With object we can access the variables and methods of a class.
An object is a reference pointer used for accessing the variables and methods of the class.
-----------------------------------------------
example-1
-----------------
package org.sandip;
import java.util.*;
public class First
{
int rollno;  //variables
String name,address;
void input()  //methods
{
	Scanner ob=new Scanner(System.in);
	System.out.println("Enter rollno,name,address");
	rollno=ob.nextInt();
	name=ob.next();
	address=ob.next();
}
void display()
{
	System.out.println("The rollno is "+rollno);
	System.out.println("The name is "+name);
	System.out.println("The address is "+address);
	}
public static void main(String[] args) {
	First obj=new First();
	obj.input();  //accessing the methods with the help of object
	obj.display();
}
}

---------------------------------- 
wap to enter employee data
1)empno
2)name
3)salary
4)designation
5)dept
and display the data.
-------------------------------------------------------------
wap to enter bank details (use case and switch)
accno,name,balance
enter 1.withdraw 2.deposite
if withdraw less then balance.then final balance =balance-withdraw.
if withdraw more then balance.then display message ("sorry cannot withdraw");
for deposite final balnace =balance+deposite
-----------------------------------------------------------------------------------------------------------
example-1
-------------------
//wap to enter employee data 1)empno 2)name 3)salary 4)designation 5)dept and display the data.
package org.sandip;
import java.util.*;
public class Employee 
{
int empno;
String name,design,dept;
float salary;
void input()
{
	Scanner ob=new Scanner(System.in);
	System.out.println("Enter empno,name,designation,dept and salary");
	empno=ob.nextInt();
	name=ob.next();
	design=ob.next();
	dept=ob.next();
	salary=ob.nextFloat();
}
void display()
{
	System.out.println("The empno is"+empno);
	System.out.println("The name is"+name);
	System.out.println("The design is"+design);
	System.out.println("The dept is"+dept);
	System.out.println("The salary is"+salary);
	
}
public static void main(String[] args) 
{
Employee ob=new Employee();
ob.input();
ob.display();
}
}
----------------------------------------------------------------------------------------
example-2
-------------------------
package org.sandip;
import java.util.*;
public class Bank 
{
public static void main(String[] args) 
{
	Scanner ob=new Scanner(System.in);
	System.out.println("Enter accno,name,Balance");
	int accno=ob.nextInt();
	String name=ob.next();
	Float bal=ob.nextFloat();
	System.out.println("Enter 1.Withdraw 2.deposite");
	int choice=ob.nextInt();
	switch(choice)
	{
	case 1:System.out.println("Enter amount to withdraw");
	float withd=ob.nextFloat();
	if(bal>withd)
	{
		bal=bal-withd;
		System.out.println("The final balance is "+bal);
	}
	else
		System.out.println("Sorry balance is less");
	
	break;
	case 2:System.out.println("Enter amount to deposite");
	float dip=ob.nextFloat();
	bal=bal+dip;
	System.out.println("The final balance is "+bal);
	break;
	default:System.out.println("wrong input");
}
}
}
----------------------------------------------------------------------------------------------
Constructor :- It is a function which has the same name of that of the class name.
It doesnot return any value nor it has any return type.
It execute automatically when an object is created for the class.
there are 2 types of constructor
1)default constructor
2)parameterized constructor.
--------------------------------------------------------------
example-1
-------------------
package org.sandip;
public class Student 
{
int rollno; //instance variable can be accessed through out the class.
String name,address;
Student()
{
	System.out.println("This is default constructor");
}
Student(int rollno,String name,String address)//local variables can be accessed within the function
{
	this.rollno=rollno; //to differentiate between the instance and local variables we use this keyword.
	this.name=name;
	this.address=address;
}
void display()
{
	System.out.println("the rollno is "+rollno);
	System.out.println("the name is "+name);
	System.out.println("the address is "+address);
	}
public static void main(String[] args) {
	Student ob=new Student();
	Student ob1=new Student(101,"sandip","Bangalore");
	ob1.display();
	}
}
------------------------------------------------------------------------------------------------------
wap using constructor to enter employee data and display it.
empno,name,salary,design
-------------------------------------------------------------------
example-
package org.sandip;
import java.util.*;
public class Employee 
{
int empno;
String name,design,dept;
float salary;
Employee(int empno,String name,String design,String dept,float salary)
{
	this.empno=empno;
	this.name=name;
	this.design=design;
	this.dept=dept;
	this.salary=salary;
}
void display()
{
	System.out.println("The empno is "+empno);
	System.out.println("The name is "+name);
	System.out.println("The design is "+design);
	System.out.println("The dept is "+dept);
	System.out.println("The salary is "+salary);
}
public static void main(String[] args) 
{
Employee ob=new Employee(101,"sandip","officer","sales",7800.34f);
ob.display();
}
}
-----------------------------------------------------------------------------------------------------
Difference between function and Constructor
-----------------------------------------------------------------
1)A function returns a value where as the constructor doesn't return a value.
2)A function can have any name other than the class name.A constructor only have 
the class name.
3)For executing (n) no of function we require single object where as for excecuting a 
single constructor we require single object.
as many constructor that many objects are required.
4)when we use the same function name more than one time it is known as function overloading.
--------------------------------------------------------------------------------------------
example-
package org.sandip;
import java.util.*;
public class Employee 
{
int empno;
String name,design,dept;
float salary;
Employee(int empno,String name,String design,String dept,float salary)
{
	this.empno=empno;
	this.name=name;
	this.design=design;
	this.dept=dept;
	this.salary=salary;
}
int sum(int a ,int b)
{
return a+b;
}

float sum(float a,float b)
{
	return a+b;
}

void display()
{
	System.out.println("The empno is "+empno);
	System.out.println("The name is "+name);
	System.out.println("The design is "+design);
	System.out.println("The dept is "+dept);
	System.out.println("The salary is "+salary);
	
}
public static void main(String[] args) 
{
Employee ob=new Employee(101,"sandip","officer","sales",7800.34f);
ob.display();
System.out.println("the sum of 2 nos are "+ob.sum(6, 6));
System.out.println("the sum of 2 nos are "+ob.sum(6.54f, 6.43f));
System.out.println("the sum of 2 nos are "+ob.sum(16, 26));
}
}
-----------------------------------------------------------------------------------
Inheritance :-It is one of the properties of Object Oriented Programing language.
In this the child class will inherite the parent class variables and methods.
We can reuse the parent class code in the child class and create a new version.
Java support 1)single inheritance.2)multi-level inheritance 3)hyrarchal inheritance.
we use the keyword super to access the parent class variables and methods.
we use the keyword extends to inherite the parent class into the child class.
we have to create object of the child class and access the variables and methods of the parent and child class both.
*java does not support multiple and hybrid inhertance
*multiple and hybrid inhertance we will do using interface.
*first the super class constructor will execute then the child class constructor will execute.
--------------Object Oriented Programming---------------------------------------------------------------
1)Inheritance:- Reusing of Exsisting code.We have Parent class,child class the child class will inheriting parent class property and it will also have the additional code. 

2)Polymerphisim:- There are 2 types of Poly-merphisim.(many-form)
a)compile time Polymerphisim---function overloading (example:- int sum(int a,int b),float sum(float a,float b);
b)runtime Polymerphisim---function overriding(abstract,interface)
3)Encapsulation:-Protecting of data is known as encapsulation.we use private and protected access specifier to protect our data. It binds the data into a single unit. 
4)Abstraction:- Hiding the complexcity and displaying the simplicity is known as abstraction.In the methods of the class complex algorithim are written .Out the class we only call the methods using object.(example-fan)
-------------------------------------------------------------------------------------
example-1
------------------------
package org.inheritance;

public class Student 
{
int rollno;
String name,address;
public Student(int rollno, String name, String address) {
	this.rollno = rollno;
	this.name = name;
	this.address = address;
}
void display()
{
	System.out.println("the rollno is "+rollno);
	System.out.println("the name is "+name);
	System.out.println("the address is "+address);
	}
}
---------------------------------------------------------------------------------------
package org.inheritance;

public class InheritanceDemo extends Student 
{
	int phy,chem,maths,total;

	public InheritanceDemo(int rollno, String name, String address, int phy, int chem, int maths) {
		super(rollno, name, address);
		this.phy = phy;
		this.chem = chem;
		this.maths = maths;
	}
	void display()
	{
		super.display();
		System.out.println("the physics marks is "+phy );
		System.out.println("the chemistry marks is "+chem );
		System.out.println("the maths marks is "+maths );
		System.out.println("the total marks is "+(phy+chem+maths));
				}
public static void main(String[] args) {
	InheritanceDemo ob=new InheritanceDemo(101,"sandip","bangalore",66,77,49);
	ob.display();
}
}
-------------------------------------------------------------------------------------------------------------
amazon
------------------
parent---->Create a product class (pid,name,price)
child ----->create a customer class inherite the product class (cusname,address,emailid,phoeneno);
display the data.
create object of the child class and display the data.
----------------------------------------------------------------------------------------------------------
example-1
-------------------
package org.inheritance;

public class Product
{
	int pid;
	String name;
	float price;
	public Product(int pid, String name, float price)
	{
		this.pid = pid;
		this.name = name;
		this.price = price;
	}
	void display()
	{
		System.out.println("The product id is "+pid);
		System.out.println("The product name is "+name);
		System.out.println("The product price is "+price);
			}
}
--------------------------------------------------------------------------------
package org.inheritance;

public class Customer extends Product 
{
	String cusname,address,emailid,phoeneno;

	public Customer(int pid, String name, float price, String cusname, String address, String emailid,
			String phoeneno)
	{
		super(pid, name, price);
		this.cusname = cusname;
		this.address = address;
		this.emailid = emailid;
		this.phoeneno = phoeneno;
	}
void display()
{
	super.display();
	System.out.println("the customer name is "+cusname);
	System.out.println("the customer address is "+address);
	System.out.println("the customer email id is "+emailid);
	System.out.println("the customer phoneno is "+phoeneno);
	
}
	public static void main(String[] args) {
		Customer ob=new Customer(101,"Samsung TV",35000.45f,"sandip","bangalore","sandip@gmail.com","7766554433");
	ob.display();
	}

}
------------------------------------------------------------------------------------------------------------
package org.inheritance;

public class Customer extends Product 
{
	String cusname,address,emailid,phoeneno;

	public Customer(int pid, String name, float price, String cusname, String address, String emailid,
			String phoeneno)
	{
		super(pid, name, price);
		this.cusname = cusname;
		this.address = address;
		this.emailid = emailid;
		this.phoeneno = phoeneno;
	}
void display()
{
	super.display();
	System.out.println("the customer name is "+cusname);
	System.out.println("the customer address is "+address);
	System.out.println("the customer email id is "+emailid);
	System.out.println("the customer phoneno is "+phoeneno);
	
}
	public static void main(String[] args) {
Customer ob=new Customer(101,"Samsung TV",35000.45f,"sandip","bangalore","sandip@gmail.com","7766554433");
Customer ob1=new Customer(102,"Samsung fridge",45000.45f,"sandip","bangalore","sandip@gmail.com","7766554433");
		ob.display();
		ob1.display();
	}

}
------------------------------------------------Assignment-1---------------------------------------
wap to create bank class details (using class and methods)
bank class --- accno,name,balance
call ---.withdraw()  deposite()
if withdraw less then balance.then final balance =balance-withdraw.
if withdraw more then balance.then display message ("sorry cannot withdraw");
for deposite final balnace =balance+deposite
-------------------------------------------------Assignment-2-------------------------------------------------------
customer has 2 bank accounts---cname,address,phoneno,email
ICICI bank ---accno,bank loc,balance
SBI bank---accno,bank loc,balance
display the customer+bank details
*no withdraw or deposite
----------------------------------------------Assignment-3------------------------------------------------
Create a student class(rollno,name,address)---------------parent class
create a PCM class(phy,chem,math,total)------------------child class
create a PCB class(phy,chem,Bio,total)--------------------child class
display the details of 2 students with total marks
----------------------------------------------------------------------------
example-1
------------------
package org.hyrarcal;
import java.util.*;
public class Student 
{
String rollno,name,address;
void input()
{
	Scanner ob=new Scanner(System.in);
	System.out.println("Enter rollno,name,address");
	rollno=ob.nextLine();
	name=ob.nextLine();
	address=ob.nextLine();
}
void display()
{
	System.out.println("The rollno is "+rollno);
	System.out.println("The name is "+name);
	System.out.println("The aaddress is "+address);
	}
}
--------------------------------------------------------------------------
package org.hyrarcal;
import java.util.*;
public class PCM extends Student
{
float phy,chem,math,total;
void input()
{
	super.input();
	Scanner ob=new Scanner(System.in);
	System.out.println("Enter phy,chem,math marks");
	phy=ob.nextFloat();
	chem=ob.nextFloat();
	math=ob.nextFloat();
}
void display()
{
	super.display();
	total=phy+chem+math;
	System.out.println("Physics marks is "+phy);
	System.out.println("Chemistry marks is "+chem);
	System.out.println("Maths marks is "+math);
	System.out.println("Total marks is "+total);
		}
}
-----------------------------------------------------------
package org.hyrarcal;
import java.util.*;
public class PCB extends Student
{
float phy,chem,bio,total;
void input()
{
	super.input();
	Scanner ob=new Scanner(System.in);
	System.out.println("Enter phy,chem,bio marks");
	phy=ob.nextFloat();
	chem=ob.nextFloat();
	bio=ob.nextFloat();
}
void display()
{
	super.display();
	total=phy+chem+bio;
	System.out.println("Physics marks is "+phy);
	System.out.println("Chemistry marks is "+chem);
	System.out.println("Biology marks is "+bio);
	System.out.println("Total marks is "+total);
		}
}
------------------------------------------------------------------------
package org.hyrarcal;
import java.util.*;
public class MainClass 
{
public static void main(String[] args) 
{
Scanner ob=new Scanner(System.in);
System.out.println("enter your Stream");
String stream=ob.next();
if(stream.equals("PCM"))
{
	PCM ob1=new PCM();
	ob1.input();
	ob1.display();
}
else
{
	PCB ob2=new PCB();
	ob2.input();
	ob2.display();
}
}
}
----------------------------------------------------------------------------------
inheritance is known as (is-a) relationship.In this child class depend upon the parent class.If there is any error in the parent class the child class will not execute.So it is known as tight coupling.
Java support loose coupling.
so we have aggregation(has-a) relationship.
example:- employee has a bank account
house has a kitchen.
--------------------------------------------------------------------------------------------------
example:- employee has a address.(employee class has a address class)
----------------------------------------------------------------------------------------
 example-1
--------------------
package org.hyrarcal;

public class Address 
{
int roadno,streetno;
String area,city,state;
public Address(int roadno, int streetno, String area, String city, String state) 
{
	this.roadno = roadno;
	this.streetno = streetno;
	this.area = area;
	this.city = city;
	this.state = state;
}
@Override  //to covert object to string
public String toString() {
	return "Address [roadno=" + roadno + ", streetno=" + streetno + ", area=" + area + ", city=" + city + ", state="
			+ state + "]";
}

}
-----------------------------------------------------------------------------------------
package org.hyrarcal;

public class Employee
{
int empno;
String name;
Address address;
public Employee(int empno, String name, Address address)
{
	this.empno = empno;
	this.name = name;
	this.address = address;
}
void display()
{
	System.out.println("the empno is "+empno);
	System.out.println("the name is "+name);
	System.out.println("the address is "+address);
	}
public static void main(String[] args)
{
	Address ob1=new Address(10,20,"MG road","Bangalore","Karnataka");
	Employee ob2=new Employee(101,"sandip",ob1);
	ob2.display();
}
}
------------------------------------------------------------------------------------------------------
wap to create a customer class(custname,address,bank)
bank class (accno,branchname,balance)
customer has a bank acc
--------------------------------------------------------------------------------------
package org.inheritance;

public class Bank 
{
int accno,balance;
String branchname;
public Bank(int accno, int balance, String branchname) 
{
	this.accno = accno;
	this.balance = balance;
	this.branchname = branchname;
}
@Override
public String toString() {
	return "Bank [accno=" + accno + ", balance=" + balance + ", branchname=" + branchname + "]";
}

}
-------------------------------------------------------------
package org.inheritance;

public class Cust
{
	String custname,address;
	Bank bank;
	public Cust(String custname, String address, Bank bank) 
	{
		this.custname = custname;
		this.address = address;
		this.bank = bank;
	}
	void display()
	{
		System.out.println("The Customer name is "+custname);
		System.out.println("The Customer address is "+address);
		System.out.println("The Bank details is "+bank);
			}
	
}
-------------------------------------------------------------------------------
package org.inheritance;

public class MainClass
{
public static void main(String[] args) 
{
Bank ob=new Bank(1001,5000,"SBI MG Road");
Cust ob1=new Cust("Sandip","Bangalore",ob);
ob1.display();
}
}
-----------------------------------------------------------------------------------
Like constructor we have setter() and getter()
------------------------------------------------------------------------------------
package org.inheritance;

public class Employee 
{
int empno;
String name,address;
float salary;
public int getEmpno() {
	return empno;
}
public void setEmpno(int empno) {
	this.empno = empno;
}
public String getName() {
	return name;
}
public void setName(String name) {
	this.name = name;
}
public String getAddress() {
	return address;
}
public void setAddress(String address) {
	this.address = address;
}
public float getSalary() {
	return salary;
}
public void setSalary(float salary) {
	this.salary = salary;
}
}
---------------------------------------------------------------------------
package org.inheritance;

public class MainClass1
{
public static void main(String[] args) 
{
Employee ob=new Employee();
ob.setEmpno(101);
ob.setName("Sandip");
ob.setAddress("Bangalore");
ob.setSalary(45000);
System.out.println("the empno is "+ob.getEmpno());
System.out.println("the empname is "+ob.getName());
System.out.println("the empaddress is "+ob.getAddress());
System.out.println("the empsalary is "+ob.getSalary());
}
}
-------------------------------------------------------------------------------------
static keyword
-------------------------
we can declare a variable as static.
we can declare a method as static.
we can declare a class as static.
we can have static block .This block execute before the main method.
We can access the static variables and methods without creating an object.
This is because a single copy of variable or method is created in the JVM(java virtual machine).
This is used for memory management.
we cannot access a non static variable inside a static method.
main method is also a static method. 
-----------------------------------------------------------------------------------------------------------------------------------
example-1
--------------------
package org.inheritance;
public class StaticDemo 
{
static int a=10,b=20;
static void display()
{
	System.out.println("The is static method");
}
static
{
	System.out.println("This is static block");
}
public static void main(String[] args) {
	display();
	System.out.println("The value of a is "+a);
	System.out.println("The value of b is "+b);
	}
}
--------------------------------------------------------------------------------
example-2
--------------------
package org.inheritance;
public class StaticDemo 
{
 static int a=10;
static int b=20;
static void display()
{
	System.out.println("The value of a is "+a);
	System.out.println("The value of b is "+b);
	System.out.println("The is static method");
}
static
{
	System.out.println("This is static block");
}
public static void main(String[] args) {
	display();
	System.out.println("The value of a is "+a);
	System.out.println("The value of b is "+b);
	}
}
------------------------------------------------------------------------------
//static variable once incremented remain incremented

package org.inheritance;
public class StaticDemo 
{
 static int a=10;
static void display()
{
	System.out.println(a++);
}
static
{
	System.out.println("This is static block");
}
public static void main(String[] args) {
	display();
	display();
	display();
	display();
	display();
		}
}
----------------------------------------------------------------------------------------------------
abstract:- We can declare a class as abstract,method as abstract.
abstract means it is incomplete.so we have incomplete class ,incomplete method.
An abstract class can contain abstract method and concrete method (method with body). 
If we declare class as abstract we cannot create object of that class.
If we declare method as abstract we don't have method body we have to override the abstract method in the child class.
and create object of the class class.
-------------------------
package org.inheritance;

abstract class AbstractDemo1 
{
abstract void display();
abstract void display1();
}
class AbstractDemo extends AbstractDemo1
{

	@Override
	void display() {
		System.out.println("This is display");		
	}

	@Override
	void display1() {
	System.out.println("This is display1");
			}
	public static void main(String[] args) {
		AbstractDemo ob=new AbstractDemo();
		ob.display();
		ob.display1();
	}
}
-----------------------------------------
AWT :- abstract windowing toolkit
TextBox() ---we have to override and give the dimention.
-----------------------------------------------------
package org.inheritance;

abstract class AbstractDemo1 
{
abstract int sum(int a,int b);
abstract float sum(float a,float b);
}
class AbstractDemo extends AbstractDemo1
{
	@Override
	int sum(int a, int b) {
				return a+b;
	}

	@Override
	float sum(float a, float b) {
				return a+b;
	}
	public static void main(String[] args) {
		AbstractDemo ob=new AbstractDemo();
	System.out.println("The sum is "+ob.sum(4, 5));
	System.out.println("The sum is "+ob.sum(4.5f, 5.4f));
	System.out.println("The sum is "+ob.sum(14.5f, 15.4f));
			}
}
----------------------------------------------------------------------------------------------
1)what is a entity?
table
2)what is attribute?
column
3)what is tuple?
row
4)what type of data is in DBMS?
structured,relational
5)privlages of view can be in own schema?
true
6)privlages of synonym can be in own schema?
false
7)what are DML OPERATIONS?
insert,delete,update
8)What is normalization use?
1)reduce redundency
2)reduce disk size
9)NVL is used for ?null value to any default value or zero.
10)% is used for ---------- and -------------?like and not like
11)which type of normalization is used for removing transient dependency?
3NF
12)where is having clause used?
in group by  queries
13)where is where clause used?
select only rows
14)object oriented programming doesnot follow M:M relationship.(TRUE)
15)DBMS-RBBMS follow how many codd rules?6 rules.
------------------------------------------------------------------------------------------------------------------ 
------------------------------------Amazon----------------------------------------------------
wap to create a product class (pid,pname,price)
create a customer class (custname,email,phoneno,Payment)
create class Payment(accno,bankname,yourname,IFICI code,amount)
Display the final bill:- should include pid,name,price,custname,email,phoneno,amount paid
*customer has a payment,product
*enter the values at runtime or use constructor.
----------------------------------------------------------------------------------------------
Example-1
--------------------
package HasADemo;
public class Product
{
int pid,price;
String name;
public Product(int pid, int price, String name) 
{
	this.pid = pid;
	this.price = price;
	this.name = name;
}
@Override
public String toString() {
	return "Product [pid=" + pid + ", price=" + price + ", name=" + name + "]";
}
}
--------------------------------------------------------------------------------
package HasADemo;

public class Payment 
{
	int accno,IFICI,amount;
	String bankname,yourname;
	
	public Payment(int accno, int iFICI, int amount, String bankname, String yourname)
	{
		this.accno = accno;
		this.IFICI = iFICI;
		this.amount = amount;
		this.bankname = bankname;
		this.yourname = yourname;
	}

	@Override
	public String toString() 
{
	return "Payment [accno=" + accno + ", IFICI=" + IFICI + ", amount=" + amount + ", bankname=" + bankname
				+ ", yourname=" + yourname + "]";
	}
}
-----------------------------------------------------------------------------
package HasADemo;

public class Customer 
{
String custname,email,phoneno;
Payment payment;
Product product;

public Customer(String custname, String email, String phoneno, Payment payment, Product product)
{
	this.custname = custname;
	this.email = email;
	this.phoneno = phoneno;
	this.payment = payment;
	this.product = product;
}
void display()
{
	System.out.println("The customer name is "+custname);
	System.out.println("The customer email is "+email);
	System.out.println("The customer phone no is "+phoneno);
	System.out.println("The customer payment details is "+payment);
	System.out.println("The customer product details is "+product);
	
}
}
-----------------------------------------------------------------------------
package HasADemo;

public class MainClass
{
public static void main(String[] args) 
{
Product p=new Product(101,35000,"Samsang TV")	;
Payment pay=new Payment(101,1100,35000,"ICICI","Sandip");
Customer cust=new Customer("sandip","sandip@gmail.com","7766554433",pay,p);
System.out.println("Final Customer Bill" );
System.out.println("*********************************************");
cust.display();
}
}
-----------------------------------------------------------------------------------------------------
package HasADemo;
import java.util.*;
public class MainClass
{
public static void main(String[] args) 
{
	Scanner ob=new Scanner(System.in);
	System.out.println("enter pid,price,pname");
	int pid=ob.nextInt();
	int ppr=ob.nextInt();
	String pname=ob.next();
Product p=new Product(pid,ppr,pname)	;
Payment pay=new Payment(101,1100,35000,"ICICI","Sandip");
Customer cust=new Customer("sandip","sandip@gmail.com","7766554433",pay,p);
System.out.println("Final Customer Bill" );
System.out.println("*********************************************");
cust.display();
}
}
------------------------------------------------------------------------------------------------------------------------------
Final :- Final keyword.
we can declare the class as final.The variable as final and we can have method as final.
If we declare the class as final we cannot inherite it.
If we declare the variable as final we have to assign it and cannot be changed.
If we declare the method as final we cannot override it.
-----------------------------------------------------------------------------------------------------------------------------
   example-1
---------------------------------
package HasADemo;

final class FinalDemo //final class cannot be extended
{
final int a = 10; //final variable has to be assigned and cannot be changed
final void display()//final method cannot be overriden
{
	System.out.println("the value of a is "+a);
	System.out.println("This is a final method");
}
public static void main(String[] args) 
{
FinalDemo ob=new FinalDemo();
ob.display();
}
}
--------------------------------------------------------------------------------------
Interface :- 
It is like abstract class but interface contain only abstract methods.we don't use the keyword abstract.
We cannot create object for the interface.
we have to implement the interface into a child class and override the abstract methods and create object of the child class. 
with interface we can do multiple inheritance.
---------------------------------------------------------------------------------
example-1
--------------------
package HasADemo;

interface a1
{
	void display();
}
interface a2
{
	void display1();
}
interface a3 extends a2
{
	void display2();
}

public class InterfaceDemo implements a1,a3  //multiple inheritance
{

	@Override
	public void display1() {
		System.out.println("display1");
		}

	@Override
	public void display2() {
		System.out.println("display2");
	}

	@Override
	public void display() {
		System.out.println("display");
	}
public static void main(String[] args) {
	 InterfaceDemo ob=new  InterfaceDemo();
	 ob.display();
	 ob.display1();
	 ob.display2();
}
}

--------------------------------------------------------------------------------------------
//a variable declared inside the interface is final and static. 
package HasADemo;

interface a1
{
	int a=10;
	void display();
}
interface a2
{
	void display1();
}
interface a3 extends a2
{
	void display2();
}

public class InterfaceDemo implements a1,a3
{

	@Override
	public void display1() {
		System.out.println("display1");
		}

	@Override
	public void display2() {
		System.out.println("display2");
	}

	@Override
	public void display() {
		System.out.println("display");
	}
public static void main(String[] args) {
	 InterfaceDemo ob=new  InterfaceDemo();
	 ob.display();
	 ob.display1();
	 ob.display2();
	 System.out.println("the value of a is "+a);
}
}
-------------------------------------------------
example-1
---------------------
//function overridding require 2 classes.
package org.inheritance;

abstract class AbstractDemo1 
{
abstract int sum(int a,int b);
abstract float sum(float a,float b);
}
class AbstractDemo extends AbstractDemo1
{
	@Override
	int sum(int a, int b) 
	{
	return a+b;
	}

	@Override
	float sum(float a, float b) 
	{
	return a+b;
	}
	public static void main(String[] args) {
		AbstractDemo ob=new AbstractDemo();
	System.out.println("The sum is "+ob.sum(4, 5));
	System.out.println("The sum is "+ob.sum(4.5f, 5.4f));
	System.out.println("The sum is "+ob.sum(14.5f, 15.4f));
			}
}
-------------------------------------------------------------------------------------------------
//function overloading  :- the function name is same but does addition for float,int double ...
package org.inheritance;
public class OverloadingDemo 
{
int sum(int a,int b)
{
return a+b;	
}
float sum(float a,float b)
{
	return a+b;
}
double sum(double a,double b)
{
	return a+b;
}
public static void main(String[] args) {
	OverloadingDemo ob1=new OverloadingDemo();
	System.out.println("The sum is "+ob1.sum(56.33, 53.22));
	System.out.println("The sum is "+ob1.sum(4,5));
	System.out.println("The sum is "+ob1.sum(51.33f, 53.22f));
	System.out.println("The sum is "+ob1.sum(14,15));
	System.out.println("The sum is "+ob1.sum(21.33f, 33.22f));
	}
}
-----------------------------------------------------------------------------------------------------
package org.inheritance;
public class OverloadingDemo1 
{
void swap(int a,int b)
{
int swap;
swap=a;
a=b;
b=swap;
System.out.println("The value of a is "+a);
System.out.println("The value of  b is "+b);
}

void swap(float a,float b)
{
float swap;
swap=a;
a=b;
b=swap;
System.out.println("The value of a is "+a);
System.out.println("The value of  b is "+b);
}

void swap(double a,double b)
{
double swap;
swap=a;
a=b;
b=swap;
System.out.println("The value of a is "+a);
System.out.println("The value of  b is "+b);
}

public static void main(String[] args) 
{
	OverloadingDemo1 ob=new OverloadingDemo1();
	ob.swap(10,20);
	ob.swap(10.3f, 20.5f);
	ob.swap(45.23, 45.11);
}
}
-----------------------------------------------------------------------------
Exception Handling
--------------------------------
This is used to handle the exception and allow the rest part of the program to execute.
The program should execute till the end.
we have 3 types of error.
1)Compile time error or syntax error:- missing of semi colon,spelling mistake.
2)logical error :it is due to wrong logic. 
3)Runtime error:- divide a number by zero,arrayIndexOutofBound,NumberFormatException
--------------------------------
In this we will handle only runtime error .if the user commits an error at ruuntime by wrong input we have to handle it and allow the program to execute till the end of the program.
--------------------------------------------------------------
we have 5 keywords.
1)try
2)catch
3)finally
4)throws 
5)throw
-----------------------------------------------------------------------------------------
There are 3 types of exception
1)checked Exception:-IterruptedException,SQLException,IOException...
*have to handle the error then it will execute otherwise it gives a compile time error.
2)unchecked Exception:-divide a number by zero,arrayIndexOutofBound,NumberFormatException
*if user enter wrong input then it may give a error during when the program is running. 
3)error:-harddisk crash,stack overflow etc.
---------------------------------------------------------------
example-1
-------------------
package org.inheritance;
import java.util.*;
public class ExceptionDemo1 
{
public static void main(String[] args) 
{
	try
	{
Scanner ob=new Scanner(System.in);
System.out.println("Enter 2 nos");
int a=ob.nextInt();
int b=ob.nextInt();
int c=a/b;
System.out.println("The result is :"+c);
	}
	catch(Exception ae)
	{
		System.out.println("The error is "+ae);
	}
System.out.println("the end");
}
}
---------------------------------------------------------------------------
Example-2
----------------------------------------------------------------
package org.inheritance;
import java.util.*;
public class ArrayIndex 
{
public static void main(String[] args) {
	int a[]=new int[5];
	try
	{
	Scanner ob=new Scanner(System.in);
	System.out.println("Enter 5 nos");
	for(int i=0;i<5;i++)
	a[i]=ob.nextInt();
	
	System.out.println("The 5 nos are");
	for(int i=0;i<=5;i++)
		System.out.println(a[i]);
	}
	catch(Exception ae)
	{
		System.out.println("the error is "+ae);
	}
	System.out.println("These are 5 nos");	
}
}
---------------------------------------------------------------------
The catch block will execute when there is error.
The finally block will execute if there is error or no error.
It is used for connection closing,file closing etc.
--------------------------------------------------------------------------------------
example-3
--------------------
package org.inheritance;
import java.util.*;
public class ArrayIndex 
{
public static void main(String[] args) {
	int a[]=new int[5];
	try
	{
	Scanner ob=new Scanner(System.in);
	System.out.println("Enter 5 nos");
	for(int i=0;i<5;i++)
	a[i]=ob.nextInt();
	
	System.out.println("The 5 nos are");
	for(int i=0;i<5;i++)
		System.out.println(a[i]);
	}
	catch(Exception ae)
	{
		System.out.println("the error is "+ae);
	}
	finally
	{
	System.out.println("These are 5 nos");
	}
}
}
-------------------------------------------------------------------------------------------------------------------
so we can also use try-catch or try-finally or both try-catch-finally
---------------------------------------------------------------------------------------------------
throws Exception :- It is written with main method or any other methods.
It is used for checked exception.
example:- InterruptedException,IOException,SqlException
---------------------------------------------------------------------------------------------------
throw :- it is used for user defined exception.
example:- 
i)salary should be greater than 18k
ii)marks should be greater than 0.
iii)age should be greater than 18 to caste your vote.
----------------------------------------------------------------------------------------------------
example-1
---------------------
package org.sandip;
public class ThrowsDemo extends Thread 
{
public static void main(String[] args) throws InterruptedException 
{
	for(int i=1;i<=10;i++)
	{
		System.out.println(i);
		sleep(1000);//has to be checked with handling error itt will not allow you to run 
}
}
}
----------------------------------------------------------------------------------------------------------
example-2
------------------
package org.sandip;
import java.util.*;
public class ThrowsDemo  
{
public static void main(String[] args) throws Exception 
{
	Scanner ob=new Scanner(System.in);
	System.out.println("Enter your age");
	int age = ob.nextInt();
	if(age>=18)
		System.out.println("you are eligible to vote");
	else
		throw new Exception ("you are not eligible to vote");
}
}
---------------------------------------------------------------------------------------------------------
Collection Framework
--------------------------------------
Collection framework is a collection of objects.
It dynamically increases when we add the data and decreases when we delete the data.
In this we store ,manipulate,insert,sort,search,delete data from the begining,at the middle and at the end.
The difference between an array and the collection is 
 i)array size is fixed and accept homogenious data only.
int a[]=new int[5];
float a[]=new float[5];
ii)In collection it can accept hetrogenious data.  
The size also is not fixed .it dynamically extend or contract when we add or remove data.

In collection frame work we have some interfaces (Set,List,Map,Queue)
It also provides many classes like (ArrayList,LinkedList,Vector,TreeSet,LinkedHashSet,HashMap,HashTable,Stack)
------------------------------------------------------------------------------------------
1)Set(Interface)-----(classes)--TreeSet,HashSet,LinkedHashSet
  Set :-It does not allow duplicate values.
TreeSet display the data in sorted order.
LinkedHashSet :- It displays the data in the same order.
HashSet:- It displays the data in Random order.

2)List(Interface):- It allows duplicate values.
It will display the data in the same order.
class---LinkedList,ArrayList,Vector,stack,queue 
---------------------------------------------
Example-1
---------------------
package org.collection;
import java.util.*;
public class SetDemo 
{
public static void main(String[] args) {
	TreeSet<Integer> ts=new TreeSet<Integer>();
	ts.add(60);
	ts.add(50);
	ts.add(40);
	ts.add(20);
	ts.add(30);
	ts.add(10);
	ts.add(70);
	ts.add(80);
	ts.add(80);
		System.out.println(ts);

}
}
------------------------------------------------------------------------
Example-2
------------------
package org.collection;
import java.util.*;
public class SetDemo2 
{
public static void main(String[] args) {
	TreeSet<String> ts=new TreeSet<String>();
	ts.add("Ball");
	ts.add("Bat");
	ts.add("Apple");
	ts.add("Amit");
	ts.add("Grapes");
	ts.add("Orange");
	System.out.println(ts);

}
}
----------------------------------------------------------------------------------
Example-3
-----------------------
package org.collection;
import java.util.*;
public class SetDemo3 
{
public static void main(String[] args) {
	HashSet<String> ts=new HashSet<String>();
	ts.add("Ball");
	ts.add("Bat");
	ts.add("Apple");
	ts.add("Amit");
	ts.add("Grapes");
	ts.add("Orange");
	System.out.println(ts);

}
}
------------------------------------------------------------------------
example-4
---------------------
package org.collection;
import java.util.*;
public class SetDemo 
{
public static void main(String[] args) {
	HashSet<Integer> ts=new HashSet<Integer>();
	ts.add(60);
	ts.add(50);
	ts.add(40);
	ts.add(20);
	ts.add(30);
	ts.add(10);
	ts.add(70);
	ts.add(80);
	ts.add(80);
		System.out.println(ts);
		System.out.println("*********************************");
		for(Object ob:ts)
			System.out.println(ob);

}
}
-------------------------------------------------------------------------------------
example-5
-------------------
package org.collection;
import java.util.*;
public class SetDemo 
{
public static void main(String[] args) {
	LinkedHashSet<Integer> ts=new LinkedHashSet<Integer>();
	ts.add(60);
	ts.add(50);
	ts.add(40);
	ts.add(20);
	ts.add(30);
	ts.add(10);
	ts.add(70);
	ts.add(80);
	ts.add(80);
		System.out.println(ts);
		System.out.println("*********************************");
		for(Object ob:ts)
			System.out.println(ob);

}
}
-----------------------------------------------------------------------------------------------------------
Collection framework is a collection of objects.
-----------------------------------------------------------------------
Example-6
----------------
package org.collection;

public class Student 
{
int rollno;
String name,address;
public Student(int rollno, String name, String address) 
{
	super();
	this.rollno = rollno;
	this.name = name;
	this.address = address;
}
@Override
public String toString() {
	return "Student [rollno=" + rollno + ", name=" + name + ", address=" + address + "]";
}
}
-----------------------------------------------------------------------------------
package org.collection;
import java.util.*;
public class LinkedHashSetDemo 
{
public static void main(String[] args) 
{
	LinkedHashSet<Student> ls=new LinkedHashSet<Student>();
	Student ob1=new Student(101,"sandip","Bangalore");
	Student ob2=new Student(102,"kiran","Bangalore");
	Student ob3=new Student(103,"Madhu","Bangalore");
	ls.add(ob1);
	ls.add(ob2);
	ls.add(ob3);
	for(Object obj:ls)
	System.out.println(obj);
}
}
-------------------------------------------------------------------------------------------------------
create a employee class (empno,name,salary,designation)
store the object in the LinkedHashSet and display it.
-----------------------------------------------------------------------------------------
package org.collection;
import java.util.*;
public class SetDemo 
{
public static void main(String[] args) {
	LinkedHashSet<Object> ts=new LinkedHashSet<Object>();
	ts.add(60);
	ts.add(50);
	ts.add(40.565);
	ts.add(20.675);
	Student st1=new Student(101,"sandip","Bangalore");
	Student st2=new Student(102,"sunil","Bangalore");
	ts.add(st1);
	ts.add(st2);
			for(Object ob:ts)
			System.out.println(ob);
}
}
--------------------------------------------------------------------------------------------------------------
wap to create a bank class having (accno,name,brachname,balance )
Store it into a LinkedHashSet and display it.
-------------------------------------------------------------------------------------------------------------- 
example-8
---------------------
package org.collection;
import java.util.*;
public class SetDemo2 
{
public static void main(String[] args) {
	LinkedList<String> ts=new LinkedList<String>();
	ts.add("Ball");
	ts.add("Bat");
	ts.add("Apple");
	ts.add("Amit");
	ts.add("Grapes");
	ts.add("Orange");
	ts.add(3,"Banana");//insert into the 3rd index
	ts.remove(2);//remove 2nd index
	ts.set(3,"Mango");//replace the 3rd index
	System.out.println(ts);

}
}
---------------------------------------------------------------------------------
example-9
---------------------
package org.collection;

import java.util.Stack;

public class StackDemo 
{
public static void main(String[] args) {
	Stack<Integer> ss=new Stack<Integer>();//First In -Last Out
	ss.push(10);
	ss.push(20);
	ss.push(40);
	ss.push(30);
	ss.push(50);
	ss.push(70);
	ss.push(60);
	System.out.println(ss);
	System.out.println(ss.pop());
	System.out.println(ss);
	System.out.println(ss.peek());
	System.out.println(ss.search(20));
	System.out.println(ss.search(200));
	
}
}
--------------------------------------------------------------------------------
example-10
-------------------
package org.collection;
import java.util.*;
public class LinkedListDemo {
public static void main(String[] args) {
	LinkedList<Integer> ls1=new LinkedList<Integer>();
	LinkedList<Integer> ls2=new LinkedList<Integer>();
	ls1.add(50);
	ls1.add(60);
	ls1.add(40);
	ls1.add(30);
	ls1.add(20);
	ls1.add(10);
	
	ls2.add(150);
	ls2.add(160);
	ls2.add(110);
	ls2.add(120);
	ls2.add(130);
	ls2.add(140);
	ls1.addFirst(9);
	ls1.addLast(99);
	ls2.removeFirst();
	ls2.removeLast();
	for(Object obj:ls1)
		System.out.println(obj);
	System.out.println("-------------------------------------");
	for(Object obj1:ls2)
		System.out.println(obj1);
	System.out.println("-------------------------------------");
	ls1.addAll(ls2);
	for(Object obj:ls1)
		System.out.println(obj);
	System.out.println("-------------------------------------");

}
}
------------------------------------------------------------------------------------------------------------------------------
example-11
package org.collection;
import java.util.*;
public class LinkedListDemo {
public static void main(String[] args) {
	LinkedList<Integer> ls1=new LinkedList<Integer>();
	LinkedList<Integer> ls2=new LinkedList<Integer>();
	ls1.add(50);
	ls1.add(60);
	ls1.add(40);
	ls1.add(30);
	ls1.add(20);
	ls1.add(10);
	
	ls2.add(150);
	ls2.add(160);
	ls2.add(110);
	ls2.add(120);
	ls2.add(130);
	ls2.add(140);
	ls1.addFirst(9);
	ls1.addLast(99);
	ls2.removeFirst();
	ls2.removeLast();
	for(Object obj:ls1)
		System.out.println(obj);
	System.out.println("-------------------------------------");
	for(Object obj1:ls2)
		System.out.println(obj1);
	System.out.println("-------------------------------------");
	ls1.addAll(ls2);

	for(Object obj:ls1)
		System.out.println(obj);
	System.out.println("-------------------------------------");

	ls1.forEach((obj1)->System.out.println(obj1));//jdk1.8
}
}
-------------------------------------------------------------------------------------------------------------
Iterator :- It is an interface use to Iterate the list.
we have 3 abstract methods i)hasNext() ii)next() iii)remove();
It will move in forward direction.
ListIterator():- It is an interface.It will move in both directions.
It has 5 methods
i)hasNext() ii)next() iii)remove() iv)hasPrevious() v)previous()
-------------------------------------------------------------------------------------
example-1
------------------
package org.collection;
import java.util.*;
public class LinkedListDemo2 {
public static void main(String[] args) {
	LinkedList<Integer> ls1=new LinkedList<Integer>();
	ls1.add(50);
	ls1.add(60);
	ls1.add(40);
	ls1.add(30);
	ls1.add(20);
	ls1.add(10);
	Iterator itr=ls1.iterator();
	while(itr.hasNext())
	{
		System.out.println(itr.next());
	}
	}
}
------------------------------------------------------------------------------------------
example-2
---------------
package org.collection;
import java.util.*;
public class LinkedListDemo2 {
public static void main(String[] args) {
	LinkedList<Integer> ls1=new LinkedList<Integer>();
	ls1.add(50);
	ls1.add(60);
	ls1.add(40);
	ls1.add(30);
	ls1.add(20);
	ls1.add(10);
	ListIterator itr=ls1.listIterator();
	System.out.println("Forward Direction");
	while(itr.hasNext())
	{
		System.out.println(itr.next());
	}
	System.out.println("Backward Direction");
	while(itr.hasPrevious())
	{
		System.out.println(itr.previous());
	}
	}
}
------------------------------------------------------------------------------------------------
Example-3
-------------------
package org.collection;
import java.util.*;
public class LinkedListDemo2 {
public static void main(String[] args) {
	LinkedList<Integer> ls1=new LinkedList<Integer>();
	ls1.add(50);
	ls1.add(60);
	ls1.add(40);
	ls1.add(30);
	ls1.add(20);
	ls1.add(10);
	Collections.sort(ls1);
	System.out.println("The largest no is"+Collections.max(ls1));
	System.out.println("The smallest no is"+Collections.min(ls1));
	ListIterator itr=ls1.listIterator();
	System.out.println("Forward Direction");
	while(itr.hasNext())
	{
		System.out.println(itr.next());
	}
	}
}
-------------------------------------------------------------------------------------
Map :- It is an interface.
In this we enter key and value pair.
The key should not be duplicate.The value can be duplicate.
The key and value pair is known as entry.
Map is useful to search ,update,delete element on the basis of the key.
--------------------------------------------------------------------------------------------
Map-HashMap,LinkedHashMap,TreeMap(sorting);
-------------------------------------------------------------------------------
example-1
-----------------
package org.collection;
import java.util.*;
public class MapDemo 
{
public static void main(String[] args) 
{
HashMap hm=new HashMap();
hm.put(1, "sandip");
hm.put(2, "sunil");
hm.put(4, "sumeet");
hm.put(3, "sakeet");
hm.put(5, "anil");
hm.put(7, "amit");
hm.put(6, "arun");
hm.put(6, "kiran");
System.out.println(hm);
}
}
----------------------------------------------------------------------------------------------
example-2
----------------------
package org.collection;
import java.util.*;
public class MapDemo 
{
public static void main(String[] args) 
{
HashMap<Integer, String> hm=new HashMap<Integer, String>();
hm.put(1, "sandip");
hm.put(2, "sunil");
hm.put(4, "sumeet");
hm.put(3, "sakeet");
hm.put(5, "anil");
hm.put(7, "amit");
hm.put(6, "arun");
hm.put(6, "kiran");
Scanner ob=new Scanner(System.in);
System.out.println("Enter key and value");
int x=ob.nextInt();
String y=ob.next();
hm.put(x, y);
System.out.println(hm);
}
}
-------------------------------------------------------------------------------------
HashMap is converted to set because we don't have Iterator();
HashMap has a method called entrySet() to convert HashMap to Set.
Set st=hm.entrySet();
*Map.Entry Interface has 2 methods 1)getKey()  2)getValue()
----------------------------------
Set st=hm.entrySet();
Iterator itr=sr.iterator();
while(itr.hasNext())
{
Map.Entry en=(Map.Entry)itr.next();
System.out.println(en.getKey()+"  "+en.getValue());
}
-----------------------------------------------------------------------
Example-1
------------------
package org.collection;
import java.util.*;
public class MapDemo 
{
public static void main(String[] args) 
{
HashMap<Integer, String> hm=new HashMap<Integer, String>();
hm.put(1, "sandip");
hm.put(2, "sunil");
hm.put(4, "sumeet");
hm.put(3, "sakeet");
hm.put(5, "anil");
hm.put(7, "amit");
hm.put(6, "arun");
hm.put(6, "kiran");
Scanner ob=new Scanner(System.in);
System.out.println("Enter key and value");
int x=ob.nextInt();
String y=ob.next();
hm.put(x, y);
Set st=hm.entrySet();
Iterator itr=st.iterator();
while(itr.hasNext())
{
Map.Entry en=(Map.Entry)itr.next();
System.out.println(en.getKey()+" ******* "+en.getValue());
}}}
---------------------------------------------------------------------------------
Example-2
------------------
package org.collection;

public class Student 
{
int rollno;
String name,address;
public Student(int rollno, String name, String address) 
{
	this.rollno = rollno;
	this.name = name;
	this.address = address;
}
@Override
public String toString() {
	return "Student [rollno=" + rollno + ", name=" + name + ", address=" + address + "]";
}
}
-------------------------------------------------------------------------------------------------------------------
package org.collection;
import java.util.*;
public class HashMapDemo
{
public static void main(String[] args) {
	HashMap<Integer, Student> hm=new HashMap<Integer, Student>();
	Student st1=new Student(101,"sandip","Bangalore");
	Student st2=new Student(102,"anil","Bangalore");
	Student st3=new Student(103,"sunil","Bangalore");
	Student st4=new Student(104,"arun","Bangalore");
	hm.put(1,st1);
	hm.put(2,st2);
	hm.put(3,st3);
	hm.put(4,st4);
	Set st=hm.entrySet();
	Iterator itr=st.iterator();
	while(itr.hasNext())
	{
	Map.Entry en=(Map.Entry)itr.next();
	System.out.println(en.getKey()+" ******* "+en.getValue());
	}
	}
}
---------------------------------------------------------------------------------------------------------------------
package org.collection;
import java.util.*;
public class HashMapDemo
{
public static void main(String[] args) {
	HashMap<Integer, Student> hm=new HashMap<Integer, Student>();
	Student st1=new Student(101,"sandip","Bangalore");
	Student st2=new Student(102,"anil","Bangalore");
	Student st3=new Student(103,"sunil","Bangalore");
	Student st4=new Student(104,"arun","Bangalore");
	hm.put(1,st1);
	hm.put(2,st2);
	hm.put(3,st3);
	hm.put(4,st4);
	Scanner ob=new Scanner(System.in);
	System.out.println("Enter the slno you want to search");
	Integer slno=ob.nextInt();
	Set st=hm.entrySet();
	Iterator itr=st.iterator();
	while(itr.hasNext())
	{
	Map.Entry en=(Map.Entry)itr.next();
	if(en.getKey()==slno)
	System.out.println(en.getKey()+" ******* "+en.getValue());
	}
	}
}
---------------------------------------------------------------------------------------------------














